{"version":3,"sources":["reducers/paginationReducer.ts","reducers/usersReducer.ts","reducers/index.ts","sagas/getUsersSaga.ts","actions/index.ts","sagas/index.ts","components/App/Users/PaginationMenu/index.tsx","constants/index.ts","components/App/Users/FormDialog/index.tsx","components/App/Users/UserCard/index.tsx","components/App/Users/User/DelateDialog/index.tsx","containers/UsersContainer/index.ts","components/App/Users/index.tsx","components/App/index.tsx","index.tsx"],"names":["initialState","pageCountSelect","users","reducApp","combineReducers","usersReducer","state","action","type","paginationReducer","fetchUsersSaga","call","axios","get","data","put","console","log","rootSaga","all","takeLatest","PaginationMenu","setPageCountSelectHandler","itemsTotalCount","pagesCount","Math","ceil","spanItem","i","push","dotWidth","className","role","tabIndex","onClick","map","item","style","width","FormDialog","openDialog","setOpenDialog","useState","buttonSend","setButtonSend","email","setEmail","emailValidated","setEmailValidated","emailValidateHandler","val","test","name","setName","nameValidated","setNameValidated","nameValidateHandler","length","lastName","setLastName","lastNameValidated","setLastNameValidated","setLastNameHandler","lastNameValidateHandler","resetFormHandler","Dialog","open","onClose","DialogTitle","DialogContent","DialogContentText","TextField","autoFocus","margin","id","error","label","fullWidth","variant","onChange","e","target","value","DialogActions","Button","UserCard","user","setOpenDelateDialog","Card","display","alignItems","justifyContent","CardContent","Typography","sx","fontSize","color","gutterBottom","Stack","direction","spacing","IconButton","component","title","mb","body","DelateDialog","Alert","severity","UsersContainer","connect","dispatch","getUsersHandler","setPageCountSelect","useEffect","openDelateDialog","usersMap","startItem","stopItem","Container","maxWidth","Box","minHeight","Masonry","columns","xs","sm","Fab","position","bottom","right","App","sagaMiddleware","createSagaMiddleware","store","createStore","composeWithDevTools","applyMiddleware","run","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8222ef84.chunk.js","sourcesContent":["import { ActionTypes } from 'actions'\n\ntype InitialStateType = {\n  pageCountSelect: number\n}\n\nconst initialState: InitialStateType = {\n  pageCountSelect: 0,\n}\nexport const paginationReducer = (\n  state = initialState,\n  action: ActionTypes\n): InitialStateType => {\n  switch (action.type) {\n    case 'SET_PAGE_COUNT_SELECT':\n      return {\n        ...state,\n        pageCountSelect: action.pageCountSelect,\n      }\n    case 'RESET':\n      return initialState\n    default:\n      return state\n  }\n}\n","import { ActionTypes } from 'actions'\nimport { TPost } from 'types'\n\ntype InitialStateType = {\n  users: TPost[]\n}\n\nconst usersInit = [] as TPost[]\n\nconst initialState: InitialStateType = {\n  users: usersInit,\n}\nexport const usersReducer = (\n  state = initialState,\n  action: ActionTypes\n): InitialStateType => {\n  switch (action.type) {\n    case 'GET_USERS_SUCCEEDED':\n      return {\n        ...state,\n        users: action.users,\n      }\n    case 'RESET':\n      return initialState\n    default:\n      return state\n  }\n}\n","import { combineReducers } from 'redux'\nimport { paginationReducer } from './paginationReducer'\nimport { usersReducer } from './usersReducer'\n\nexport const reducApp = combineReducers({\n  usersReducer,\n  paginationReducer,\n})\n\nexport type ReducAppType = typeof reducApp\nexport type AppStateType = ReturnType<ReducAppType>\n","import { call, put } from 'redux-saga/effects'\nimport axios from 'axios'\nimport { SagaIterator } from 'redux-saga'\nimport { getUsersSuccess } from '../actions'\n\n// const API_USERS_R = 'http://77.120.241.80:8811/api/users'\n// const API_USERS = 'https://jsonplaceholder.typicode.com/users'\nconst API_POSTS = 'https://jsonplaceholder.typicode.com/posts'\n\nexport function* fetchUsersSaga(): SagaIterator {\n  try {\n    const { data } = yield call(axios.get, API_POSTS)\n    yield put(getUsersSuccess(data))\n  } catch (error) {\n    console.log('Get Users Error:', error)\n  }\n}\n","import { TPost } from 'types'\n\nexport type ActionTypes =\n  | GetUsersSuccessType\n  | FetchUsersType\n  | ResetStateActionType\n  | SetPageCountSelectType\n\nexport type ResetStateActionType = {\n  type: 'RESET'\n}\nexport const resetState = (): ResetStateActionType => ({\n  type: 'RESET',\n})\n\nexport type GetUsersSuccessType = {\n  type: 'GET_USERS_SUCCEEDED'\n  users: TPost[]\n}\nexport const getUsersSuccess = (users: TPost[]): GetUsersSuccessType => ({\n  type: 'GET_USERS_SUCCEEDED',\n  users,\n})\n\nexport type FetchUsersType = {\n  type: 'FETCH_USERS'\n}\nexport const fetchUsers = (): FetchUsersType => ({\n  type: 'FETCH_USERS',\n})\n\nexport type SetPageCountSelectType = {\n  type: 'SET_PAGE_COUNT_SELECT'\n  pageCountSelect: number\n}\nexport const setPageCountSelect = (\n  pageCountSelect: number\n): SetPageCountSelectType => ({\n  type: 'SET_PAGE_COUNT_SELECT',\n  pageCountSelect,\n})\n","import { SagaIterator } from 'redux-saga'\nimport { takeLatest, all } from 'redux-saga/effects'\nimport { fetchUsersSaga } from './getUsersSaga'\n\nexport function* rootSaga(): SagaIterator {\n  yield all([takeLatest('FETCH_USERS', fetchUsersSaga)])\n}\n","import React from 'react'\nimport './styles.css'\n// import FirstPageIcon from '@material-ui/icons/FirstPage'\nimport NavigateBeforeIcon from '@mui/icons-material/NavigateBefore'\nimport NavigateNextIcon from '@mui/icons-material/NavigateNext'\nimport { NUM_ITEMS_ON_PAGE } from '../../../../constants'\n// import LastPageIcon from '@material-ui/icons/LastPage'\n\nexport type PaginationMenuProps = {\n  setPageCountSelectHandler: (page: number) => void\n  pageCountSelect: number\n  itemsTotalCount: number\n}\n\nexport const PaginationMenu: React.FC<PaginationMenuProps> = ({\n  setPageCountSelectHandler,\n  pageCountSelect,\n  itemsTotalCount,\n}) => {\n  const pagesCount = Math.ceil(itemsTotalCount / NUM_ITEMS_ON_PAGE)\n  const spanItem = []\n  for (let i = 0; i < pagesCount; i += 1) spanItem.push(i)\n  const dotWidth = 800 / pagesCount\n\n  return (\n    <div className=\"short-event-card-pages-container\">\n      <div className=\"short-event-card-pages\">\n        {pagesCount > 3 && (\n          <span\n            className=\"short-event-card-pages--span\"\n            role=\"button\"\n            tabIndex={0}\n            onClick={() => {\n              setPageCountSelectHandler(\n                pageCountSelect > 0 ? pageCountSelect - 1 : 0\n              )\n            }}\n          >\n            <NavigateBeforeIcon />\n          </span>\n        )}\n        {spanItem.map(\n          (item) =>\n            ((pagesCount < 16 ||\n              item < 3 ||\n              (pageCountSelect < 6 && item < 8) ||\n              (pageCountSelect > pagesCount - 7 && item > pagesCount - 9) ||\n              pagesCount - 4 < item ||\n              (item - 3 < pageCountSelect && item + 3 > pageCountSelect)) && (\n              <span\n                key={`page-${pagesCount}-${item}`}\n                className={`short-event-card-pages--span \n            ${pageCountSelect === item ? 'active' : ''}`}\n                role=\"button\"\n                tabIndex={item}\n                onClick={() => {\n                  setPageCountSelectHandler(item)\n                }}\n              >\n                {item + 1}\n              </span>\n            )) || (\n              <span\n                className=\"card-pages-dot\"\n                style={{ width: `${dotWidth}px` }}\n              >\n                {' '}\n              </span>\n            )\n        )}\n        {pagesCount > 3 && (\n          <span\n            className=\"short-event-card-pages--span\"\n            role=\"button\"\n            tabIndex={0}\n            onClick={() => {\n              setPageCountSelectHandler(\n                pageCountSelect < pagesCount - 1\n                  ? pageCountSelect + 1\n                  : pagesCount - 1\n              )\n            }}\n          >\n            <NavigateNextIcon />\n          </span>\n        )}\n      </div>\n    </div>\n  )\n}\n","export const NUM_ITEMS_ON_PAGE = 5\n","import React, { useState } from 'react'\nimport Button from '@mui/material/Button'\nimport TextField from '@mui/material/TextField'\nimport Dialog from '@mui/material/Dialog'\nimport DialogActions from '@mui/material/DialogActions'\nimport DialogContent from '@mui/material/DialogContent'\nimport DialogContentText from '@mui/material/DialogContentText'\nimport DialogTitle from '@mui/material/DialogTitle'\n\nexport type FormDialogProps = {\n  openDialog: boolean\n  setOpenDialog: (openDialog: boolean) => void\n}\nexport const FormDialog: React.FC<FormDialogProps> = ({\n  openDialog,\n  setOpenDialog,\n}) => {\n  const [buttonSend, setButtonSend] = useState(false)\n\n  const [email, setEmail] = useState('')\n  const [emailValidated, setEmailValidated] = useState(false)\n  const emailValidateHandler = (val: string) => {\n    const re =\n      /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\n    setEmailValidated(re.test(val))\n  }\n  const setEmailHandler = (val: string) => {\n    setEmail(val)\n    emailValidateHandler(val)\n  }\n\n  const [name, setName] = useState('')\n  const [nameValidated, setNameValidated] = useState(false)\n  const nameValidateHandler = (val: string) => {\n    setNameValidated(val.length > 1 && val.length < 50)\n  }\n  const setNameHandler = (val: string) => {\n    setName(val)\n    nameValidateHandler(val)\n  }\n\n  const [lastName, setLastName] = useState('')\n  const [lastNameValidated, setLastNameValidated] = useState(false)\n  const lastNameValidateHandler = (val: string) => {\n    setLastNameValidated(val.length > 1 && val.length < 50)\n  }\n  const setLastNameHandler = (val: string) => {\n    setLastName(val)\n    lastNameValidateHandler(val)\n  }\n\n  const resetFormHandler = () => {\n    setOpenDialog(false)\n\n    setEmail('')\n    setName('')\n    setLastName('')\n\n    setEmailValidated(false)\n    setNameValidated(false)\n    setLastNameValidated(false)\n\n    setButtonSend(false)\n  }\n\n  const formValidate = () => {\n    setButtonSend(true)\n    emailValidateHandler(email)\n    nameValidateHandler(name)\n    setLastNameHandler(lastName)\n    if (emailValidated && nameValidated && lastNameValidated) resetFormHandler()\n  }\n\n  return (\n    <div>\n      <Dialog open={openDialog} onClose={() => setOpenDialog(true)}>\n        <DialogTitle>Добавить нового пользователя</DialogTitle>\n        <DialogContent>\n          <DialogContentText>\n            Чтобы добавить пользователя - заполните, пожалуйста, все поля\n          </DialogContentText>\n          <TextField\n            autoFocus\n            margin=\"dense\"\n            id=\"email\"\n            error={!emailValidated && buttonSend}\n            label=\"Email Address\"\n            type=\"email\"\n            fullWidth\n            variant=\"standard\"\n            onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n              setEmailHandler(e.target.value)\n            }}\n          />\n          <TextField\n            id=\"name\"\n            error={!nameValidated && buttonSend}\n            margin=\"dense\"\n            label=\"Имя\"\n            type=\"text\"\n            fullWidth\n            variant=\"standard\"\n            onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n              setNameHandler(e.target.value)\n            }\n          />\n          <TextField\n            id=\"lastname\"\n            error={!lastNameValidated && buttonSend}\n            margin=\"dense\"\n            label=\"Фамилия\"\n            type=\"text\"\n            fullWidth\n            variant=\"standard\"\n            onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n              setLastNameHandler(e.target.value)\n            }\n          />\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={resetFormHandler}>Отмена</Button>\n          <Button onClick={formValidate}>Добавить</Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  )\n}\n","import React, { useState } from 'react'\nimport Card from '@mui/material/Card'\nimport CardActions from '@mui/material/CardActions'\nimport CardContent from '@mui/material/CardContent'\nimport Button from '@mui/material/Button'\nimport Typography from '@mui/material/Typography'\nimport { TPost } from 'types'\nimport { IconButton, Paper, Stack } from '@mui/material'\nimport DeleteForeverIcon from '@mui/icons-material/DeleteForever'\nimport EditIcon from '@mui/icons-material/Edit'\nimport { DelateDialog } from '../User/DelateDialog'\n\nexport type UserCardProps = {\n  user: TPost\n  setOpenDelateDialog: (openDelateDialog: boolean) => void\n}\nexport const UserCard: React.FC<UserCardProps> = ({\n  user,\n  setOpenDelateDialog,\n}) => {\n  return (\n    <Card\n      style={{\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n      }}\n    >\n      <CardContent>\n        <Typography\n          sx={{\n            fontSize: 14,\n            display: 'flex',\n            justifyContent: 'space-between',\n          }}\n          color=\"text.secondary\"\n          gutterBottom\n        >\n          {`${user.id}`}\n          <Stack direction=\"row\" spacing={1}>\n            <IconButton>\n              <EditIcon />\n            </IconButton>\n            <IconButton onClick={() => setOpenDelateDialog(true)}>\n              <DeleteForeverIcon />\n            </IconButton>\n          </Stack>\n        </Typography>\n        <Typography variant=\"h5\" component=\"div\">\n          {user.title}\n        </Typography>\n        <Typography sx={{ mb: 1.5 }} color=\"text.secondary\">\n          {user.body}\n        </Typography>\n        <Typography variant=\"body2\">\n          well meaning and kindly. a benevolent smile\n        </Typography>\n      </CardContent>\n    </Card>\n  )\n}\n","import React, { useState } from 'react'\nimport Button from '@mui/material/Button'\nimport TextField from '@mui/material/TextField'\nimport Dialog from '@mui/material/Dialog'\nimport DialogActions from '@mui/material/DialogActions'\nimport DialogContent from '@mui/material/DialogContent'\nimport DialogContentText from '@mui/material/DialogContentText'\nimport DialogTitle from '@mui/material/DialogTitle'\nimport { Alert } from '@mui/material'\n\nexport type FormDialogProps = {\n  openDialog: boolean\n  setOpenDialog: (openDialog: boolean) => void\n}\nexport const DelateDialog: React.FC<FormDialogProps> = ({\n  openDialog,\n  setOpenDialog,\n}) => {\n  return (\n    <div>\n      <Dialog open={openDialog} onClose={() => setOpenDialog(true)}>\n        <DialogTitle>Удаление пользователя</DialogTitle>\n        <DialogContent>\n          <DialogContentText>\n            <Alert severity=\"error\">\n              Вы действительно хотите удалить пользователя?\n            </Alert>\n          </DialogContentText>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={() => setOpenDialog(false)}>Отмена</Button>\n          <Button onClick={() => setOpenDialog(false)}>Удалить</Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  )\n}\n","import { Dispatch } from 'redux'\nimport { connect, ConnectedProps } from 'react-redux'\nimport { ActionTypes, fetchUsers, setPageCountSelect } from 'actions'\nimport { AppStateType } from 'reducers'\nimport { Users } from 'components/App/Users'\n\nconst mapStateToProps = (state: AppStateType) => {\n  return {\n    users: state.usersReducer.users,\n    pageCountSelect: state.paginationReducer.pageCountSelect,\n  }\n}\n\ntype MapDispatchPropsType = {\n  getUsersHandler: () => void\n  setPageCountSelectHandler: (pageCountSelect: number) => void\n}\n\nconst mapDispatchToProps = (\n  dispatch: Dispatch<ActionTypes>\n): MapDispatchPropsType => {\n  return {\n    getUsersHandler: () => {\n      dispatch(fetchUsers())\n    },\n    setPageCountSelectHandler: (pageCountSelect) => {\n      dispatch(setPageCountSelect(pageCountSelect))\n    },\n  }\n}\nexport const UsersContainer = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Users)\n\ntype TOwnProps = {\n  handleShowMap: () => void\n}\n\nexport type TUsersContainer = ConnectedProps<typeof UsersContainer> & TOwnProps\n","import React, { useEffect, useState } from 'react'\nimport Masonry from '@mui/lab/Masonry'\nimport { TPost } from 'types'\nimport PersonAddIcon from '@mui/icons-material/PersonAdd'\nimport { Box, Container, Fab } from '@mui/material'\nimport { NUM_ITEMS_ON_PAGE } from '../../../constants'\nimport { PaginationMenu } from './PaginationMenu'\nimport { User } from './User'\nimport { FormDialog } from './FormDialog'\nimport { UserCard } from './UserCard'\nimport { DelateDialog } from './User/DelateDialog'\n\nexport type UsersProps = {\n  getUsersHandler: () => void\n  users: TPost[]\n  pageCountSelect: number\n  setPageCountSelectHandler: (pageCountSelect: number) => void\n}\nexport const Users: React.FC<UsersProps> = ({\n  getUsersHandler,\n  users,\n  pageCountSelect,\n  setPageCountSelectHandler,\n}) => {\n  useEffect(() => {\n    getUsersHandler()\n  }, [getUsersHandler])\n\n  const [openDialog, setOpenDialog] = useState(false)\n  const [openDelateDialog, setOpenDelateDialog] = useState(false)\n\n  const usersMap = []\n  const startItem = pageCountSelect * NUM_ITEMS_ON_PAGE\n  const stopItem =\n    startItem + NUM_ITEMS_ON_PAGE < users.length\n      ? startItem + NUM_ITEMS_ON_PAGE\n      : users.length\n  for (let i = startItem; i < stopItem; i += 1) {\n    usersMap.push(\n      <UserCard\n        key={`user-${users[i].id}`}\n        user={users[i]}\n        setOpenDelateDialog={setOpenDelateDialog}\n      />\n    )\n  }\n\n  return (\n    <>\n      <Container maxWidth=\"lg\">\n        <Box sx={{ width: '100%', minHeight: 693 }}>\n          <Masonry columns={{ xs: 1, sm: 2 }} spacing={3}>\n            {usersMap}\n          </Masonry>\n        </Box>\n      </Container>\n      <Fab\n        variant=\"extended\"\n        color=\"primary\"\n        aria-label=\"add\"\n        style={{ position: 'absolute', bottom: 20, right: 40 }}\n        onClick={() => setOpenDialog(true)}\n      >\n        <PersonAddIcon />\n      </Fab>\n      <PaginationMenu\n        setPageCountSelectHandler={setPageCountSelectHandler}\n        pageCountSelect={pageCountSelect}\n        itemsTotalCount={8}\n      />\n      <FormDialog openDialog={openDialog} setOpenDialog={setOpenDialog} />\n      <DelateDialog\n        openDialog={openDelateDialog}\n        setOpenDialog={setOpenDelateDialog}\n      />\n    </>\n  )\n}\n","import { UsersContainer } from 'containers/UsersContainer'\nimport React from 'react'\nimport './styles.css'\n\nexport const App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <UsersContainer />\n    </div>\n  )\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport createSagaMiddleware from 'redux-saga'\nimport { applyMiddleware, createStore } from 'redux'\nimport { composeWithDevTools } from 'redux-devtools-extension'\nimport { reducApp } from 'reducers'\nimport { Provider } from 'react-redux'\nimport { rootSaga } from './sagas'\nimport { App } from './components/App'\n\nconst sagaMiddleware = createSagaMiddleware()\n\nconst store = createStore(\n  reducApp,\n  composeWithDevTools(applyMiddleware(sagaMiddleware))\n)\nsagaMiddleware.run(rootSaga)\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}